import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'maven-publish'
    id 'java-library'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.33'
}

// INIT CONFIG
ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.version}-${config.build_number}"
group = "vazkii.psi"
archivesBaseName = config.mod_name

if (System.getenv().BUILD_NUMBER != null) {
    version += ".${System.getenv().BUILD_NUMBER}"
}

repositories {
    maven {
        // for AutoRegLib and JEI
        name "BlameJared"
        url "https://maven.blamejared.com/"
    }
}

dependencies {
    implementation rfg.deobf("vazkii.autoreglib:AutoRegLib:${config.arl_version}")
    implementation rfg.deobf("mezz.jei:jei_${config.mc_version}:${config.jei_version}")
}

minecraft {
    mcVersion = "1.12.2"

    injectedTags.put("MOD_ID", "psi")
    injectedTags.put('VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set("${project.group}.common.lib.LibMisc")
}

/*//This here is for SCP
repositories {
    mavenCentral()
}
configurations {
    sshAntTask
}

//End of the SCP config

dependencies {
    sshAntTask "org.apache.ant:ant-jsch:1.7.1", "jsch:jsch:0.1.29"
}*/

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
}

jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveFileName = "${archivesBaseName}-${version}-deobf.${archiveExtension}"
}
task srcJar(type: Jar) {
    from(sourceSets.main.java)
    archiveClassifier = 'sources'
    archiveFileName = "${archivesBaseName}-${version}-sources.${archiveExtension}"
}
task apiJar(type: Jar) {
    // Remove sources from the api jar when MinecraftForge/ForgeGradle#369 is fixed
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'vazkii/psi/api/**'

    archiveClassifier = 'api'
    archiveFileName = "${archivesBaseName}-${version}-api.${archiveExtension}"
}

artifacts {
    archives srcJar, apiJar
}

/**
 * Increments the buildnumber in your config file, and saves it
 */
task incrementBuildNumber {
    doLast {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }

        file('web/versions.ini').append("\n${version}=${minecraft.version}")
        file("${config.dir_repo}/version/${minecraft.version}.txt").write("${version}")
    }
}

import java.util.regex.Pattern

/*task sortArtifacts(type: Copy) {
    from jar.destinationDir
    into config.dir_output
    //Put each jar with a classifier in a subfolder with the classifier as its name
    eachFile {
        //This matcher is used to get the classifier of the jar
        def matcher = Pattern.compile(Pattern.quote("$config.mod_name-$version") + "-(?<classifier>\\w+)\\.jar").matcher(it.name)
        //Only change the destination for full matches, i.e jars with classifiers
        if (matcher.matches())
        {
            def classifier = matcher.group('classifier')
            *//* Set the relative path to change the destination, since
             * Gradle doesn't seem to like the absolute path being set*//*
            it.relativePath = it.relativePath.parent.append(false, classifier, it.name)
        }
    }
}*/

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            artifact apiJar
            artifact srcJar
            
            pom.withXml {
                if (asNode().get("dependencies").size() > 0) { 
                    // Deobf deps are a bit broken on gradle 4.8+ with maven-publish, let's not put them there
                    asNode().remove(asNode().get("dependencies"))
                }
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

defaultTasks 'clean', 'build', 'sortArtifacts', 'incrementBuildNumber'


idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
